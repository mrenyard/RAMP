<?php
/**
 * Svelte - Rapid web application development enviroment for building
 *  flexible, customisable web systems.
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program; if
 * not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 *
 * @author Matt Renyard (renyard.m@gmail.com)
 * @package svelte
 * @version 0.0.9;
 */
namespace svelte\model\business\field;

use svelte\core\Str;
use svelte\core\iCollection;
use svelte\core\Collection;
use svelte\condition\PostData;
use svelte\model\business\BusinessModel;
use svelte\model\business\Record;
use svelte\core\FailedValidationException;

/**
 */
abstract class Field extends BusinessModel {

  protected $propertyName;
  protected $containingRecord;
  private $errorCollection;

  /**
   * Creates property with referance to its containing record.
   * @param \svelte\model\business\Record $containingRecord Record parent of *this* property
   */
  public function __construct(Str $propertyName, Record $containingRecord, iCollection $children = null)
  {
    parent::__construct($children);
    //$this->validationRule = $validationRule;
    $this->containingRecord = $containingRecord;
    $this->propertyName = $propertyName;
    $this->errorCollection = new Collection(Str::set('svelte\core\Str'));
  }

  /**
   * {@inheritdoc}
   */
  final protected function get_id() : Str
  {
    return Str::COLON()->prepend(
      $this->containingRecord->id
    )->append(
      Str::hyphenate($this->propertyName)
    );
  }

  /**
   * {@inheritdoc}
   */
  protected function get_value()
  {
    return $this->containingRecord->getPropertyValue($this->propertyName);
  }

  /**
   */
  public function validate(PostData $postdata)
  {
    $this->errorCollection = new Collection(Str::set('svelte\core\Str'));
    foreach ($postdata as $inputdata) {
      if ($inputdata->attribute == $this->id) {
        $propertyName = (string)$this->propertyName;
        try {
          $this->containingRecord->$propertyName = $inputdata->value;
        } catch (FailedValidationException $e) {
          $this->errorCollection->add(Str::set($e->getMessage()));
        }
      }
    }
  }

  /**
   */
  public function hasErrors() : bool
  {
    return ($this->errorCollection->count() > 0);
  }

  /**
   */
  public function getErrors() : iCollection
  {
    return $this->errorCollection;
  }

  /**
   *
  final public function processValidationRules($value)
  {
    /*if (!$this->validationRule->process($value)->get()) {
      throw new FailedValidationException($this->validationRule->errorMassage);
    }*
  }*/
}
