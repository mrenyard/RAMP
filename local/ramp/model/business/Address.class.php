<?php
/**
 * RAMP - Rapid web application development environment for building flexible, customisable web systems.
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program; if
 * not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 * 
 * FILE GENERATED BY CODE BASED ON DATA SCHEMA USING RAMP.make
 *
 * @author Matt Renyard (renyard.m@gmail.com)
 * @package RAMP
 * @version 0.0.9;
 */
namespace ramp\model\business;

use ramp\core\Str;
use ramp\core\StrCollection;

/**
 * Collection of Address.
 */
class AddressCollection extends RecordCollection { }

/**
 * Concrete Record for Address.
 */
class Address extends Record
{
  protected function get_countryCode() : ?RecordComponent
  {
    if ($this->register('countryCode', RecordComponentType::KEY)) {
      $this->initiate(new field\Input($this->registeredName, $this,
        Str::set('expanded description of expected field content'),
        new validation\dbtype\Char(
          Str::set('string with a maximum charactor length of '),
          2, new validation\Alphabetic(
            Str::set('containung ONLY letters, hypens or underscores, a single word')
          ),
        )
      ));
    }
    return $this->registered; 
  }

  protected function get_postalCode() : ?RecordComponent
  {
    if ($this->register('postalCode', RecordComponentType::KEY)) {
      $this->initiate(new field\Input($this->registeredName, $this,
        Str::set('expanded description of expected field content'),
        new validation\dbtype\VarChar(
          Str::set('string with a maximum charactor length of '),
          8, new validation\PostCode(
            Str::set('A UK PostCode')
          ),
        )
      ));
    }
    return $this->registered; 
  }

  protected function get_deliveryPointSuffix() : ?RecordComponent
  {
    if ($this->register('deliveryPointSuffix', RecordComponentType::KEY)) {
      $this->initiate(new field\Input($this->registeredName, $this,
        Str::set('expanded description of expected field content'),
        new validation\dbtype\Char(
          Str::set('string with a character length of exactly '),
          2, new validation\UppercaseAlphanumericStrict(
            Str::set('containung ONLY letters or numbers, a single word')
          ),
        )
      ));
    }
    return $this->registered; 
  }

  protected function get_buildingNumber() : ?RecordComponent
  {
    if ($this->register('buildingNumber', RecordComponentType::PROPERTY)) {
      $this->initiate(new field\Input($this->registeredName, $this,
        Str::set('expanded description of expected field content'),
        new validation\dbtype\VarChar(
          Str::set('string with a maximum charactor length of '),
          15, new validation\Alphanumeric(
            Str::set('containung ONLY letters, numbers, hypens or underscores, a single word')
          ),
        )
      ));
    }
    return $this->registered; 
  }

  protected function get_buildingName() : ?RecordComponent
  {
    if ($this->register('buildingName', RecordComponentType::PROPERTY)) {
      $this->initiate(new field\Input($this->registeredName, $this,
        Str::set('expanded description of expected field content'),
        new validation\dbtype\VarChar(
          Str::set('string with a maximum charactor length of '),
          45, new validation\Alphanumeric(
            Str::set('containung ONLY letters, numbers, hypens or underscores, a single word')
          ),
        )
      ));
    }
    return $this->registered; 
  }

  protected function get_subBuildingNumber() : ?RecordComponent
  {
    if ($this->register('subBuildingNumber', RecordComponentType::PROPERTY)) {
      $this->initiate(new field\Input($this->registeredName, $this,
        Str::set('expanded description of expected field content'),
        new validation\dbtype\VarChar(
          Str::set('string with a maximum charactor length of '),
          15, new validation\Alphanumeric(
            Str::set('containung ONLY letters, numbers, hypens or underscores, a single word')
          ),
        )
      ));
    }
    return $this->registered; 
  }

  protected function get_organisationName() : ?RecordComponent
  {
    if ($this->register('organisationName', RecordComponentType::PROPERTY)) {
      $this->initiate(new field\Input($this->registeredName, $this,
        Str::set('expanded description of expected field content'),
        new validation\dbtype\VarChar(
          Str::set('string with a maximum charactor length of '),
          45, new validation\AlphanumericPhrase(
            Str::set('containung ONLY spaces, letters, numbers, hypens or underscores, a ')
          ),
        )
      ));
    }
    return $this->registered; 
  }

  protected function get_departmentName() : ?RecordComponent
  {
    if ($this->register('departmentName', RecordComponentType::PROPERTY)) {
      $this->initiate(new field\Input($this->registeredName, $this,
        Str::set('expanded description of expected field content'),
        new validation\dbtype\VarChar(
          Str::set('string with a maximum charactor length of '),
          45, new validation\AlphanumericPhrase(
            Str::set('containung ONLY spaces, letters, numbers, hypens or underscores, a ')
          ),
        )
      ));
    }
    return $this->registered; 
  }

  protected function get_PoBoxNumber() : ?RecordComponent
  {
    if ($this->register('PoBoxNumber', RecordComponentType::PROPERTY)) {
      $this->initiate(new field\Input($this->registeredName, $this,
        Str::set('expanded description of expected field content'),
        new validation\dbtype\VarChar(
          Str::set('string with a maximum charactor length of '),
          15, new validation\Alphanumeric(
            Str::set('containung ONLY spaces, letters, numbers, hypens or underscores, a ')
          ),
        )
      ));
    }
    return $this->registered; 
  }

  protected function get_dependentThoroughfare() : ?RecordComponent
  {
    if ($this->register('dependentThoroughfare', RecordComponentType::PROPERTY)) {
      $this->initiate(new field\Input($this->registeredName, $this,
        Str::set('expanded description of expected field content'),
        new validation\dbtype\VarChar(
          Str::set('string with a maximum charactor length of '),
          75, new validation\AlphanumericPhrase(
            Str::set('containung ONLY spaces, letters, numbers, hypens or underscores, a ')
          ),
        )
      ));
    }
    return $this->registered; 
  }

  protected function get_thoroughfare() : ?RecordComponent
  {
    if ($this->register('thoroughfare', RecordComponentType::PROPERTY)) {
      $this->initiate(new field\Input($this->registeredName, $this,
        Str::set('expanded description of expected field content'),
        new validation\dbtype\VarChar(
          Str::set('string with a maximum charactor length of '),
          75, new validation\AlphanumericPhrase(
            Str::set('containung ONLY spaces, letters, numbers, hypens or underscores, a ')
          ),
        )
      ));
    }
    return $this->registered; 
  }

  protected function get_doubleDependentLocality() : ?RecordComponent
  {
    if ($this->register('doubleDependentLocality', RecordComponentType::PROPERTY)) {
      $this->initiate(new field\Input($this->registeredName, $this,
        Str::set('expanded description of expected field content'),
        new validation\dbtype\VarChar(
          Str::set('string with a maximum charactor length of '),
          45, new validation\AlphanumericPhrase(
            Str::set('containung ONLY spaces, letters, numbers, hypens or underscores, a ')
          ),
        )
      ));
    }
    return $this->registered; 
  }

  protected function get_dependentLocality() : ?RecordComponent
  {
    if ($this->register('dependentLocality', RecordComponentType::PROPERTY)) {
      $this->initiate(new field\Input($this->registeredName, $this,
        Str::set('expanded description of expected field content'),
        new validation\dbtype\VarChar(
          Str::set('string with a maximum charactor length of '),
          45, new validation\AlphanumericPhrase(
            Str::set('containung ONLY spaces, letters, numbers, hypens or underscores, a ')
          ),
        )
      ));
    }
    return $this->registered; 
  }

  protected function get_postTown() : ?RecordComponent
  {
    if ($this->register('postTown', RecordComponentType::PROPERTY)) {
      $this->initiate(new field\Input($this->registeredName, $this,
        Str::set('expanded description of expected field content'),
        new validation\dbtype\VarChar(
          Str::set('string with a maximum charactor length of '),
          45, new validation\AlphanumericPhrase(
            Str::set('containung ONLY spaces, letters, numbers, hypens or underscores, a ')
          ),
        )
      ));
    }
    return $this->registered; 
  }

  /*
  protected function get_occupants() : field\Field
  {
    if (!isset($this[14]))
    {
      $this[14] = new field\Relation(
        Str::set('occupants'),
        $this,
        Filter::build('person?home-address=GB|SO16+8EL|t1'),
      );
    }
    return $this[14];
  }*/
}
