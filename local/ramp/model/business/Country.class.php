<?php
/**
 * RAMP - Rapid web application development environment for building flexible, customisable web systems.
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program; if
 * not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 * 
 * FILE GENERATED BY CODE BASED ON DATA SCHEMA USING RAMP.make
 *
 * @author Matt Renyard (renyard.m@gmail.com)
 * @package RAMP
 * @version 0.0.9;
 */
namespace ramp\model\business;

use ramp\core\Str;
use ramp\core\StrCollection;

/**
 * Collection of Country.
 */
class CountryCollection extends RecordCollection { }

/**
 * Concrete Record for Country.
 */
class Country extends Record
{
  protected function get_code() : ?RecordComponent
  {
    if ($this->register('code', RecordComponentType::KEY, TRUE)) {
      $this->initiate(new field\Input($this->registeredName, $this,
        Str::set('expanded description of expected field content'),
        new validation\dbtype\Char(
          Str::set('string with a maximum charactor length of '),
          2, new validation\Alphabetic(
            Str::set('containing ONLY letters, hypens or underscores, a single word')
          ),
        )
      ));
    }
    return $this->registered; 
  }

  protected function get_name() : ?RecordComponent
  {
    if ($this->register('name', RecordComponentType::PROPERTY, TRUE)) {
      $this->initiate(new field\Input($this->registeredName, $this,
        Str::set('expanded description of expected field content'),
        new validation\dbtype\Char(
          Str::set('string with a maximum charactor length of '),
          45, new validation\Alphabetic(
            Str::set('containing ONLY letters, hypens or underscores, a single word')
          ),
        )
      ));
    }
    return $this->registered; 
  }
}
