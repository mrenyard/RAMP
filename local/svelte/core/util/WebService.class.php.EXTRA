<?php
/**
 * Svelte - Rapid web application development using best practice.
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program; if
 * not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 *
 * @author Matt Renyard (renyard.m@gmail.com)
 * @package svelte
 * @version 0.0.9;
 */
namespace svelte\core\util;

use svelte\core\Object;
use svelte\core\String;
use svelte\core\Boolean;
use svelte\model\HttpMethod;

/**
 *
 *
 * Based on work by Dr. M. Elkstein (with thanks)
 * http://rest.elkstein.org/2008/02/using-rest-in-php.html
 */
class WebService_EXTRA extends Object {

  private $hostName;
  private $portNumber;
  private $responseHeader;
  private $responseStatus;
  private $responseCode;
  private $responseBody;

  /**
   *
   * @param ResponseType
   */
  public function __construct(String $hostName, $portNumber = null)
  {
    $this->hostName = (string)$hostName;
    if ($portNumber === null) {
      $portNumber = (null !== ($port = explode(':', $this->hostName)[1]))? $port : 80;
    } elseif (((string)$portNumber)!==((string)(int)$portNumber)) {
      throw new \InvalidArgumentException('TODO:mrenyard: ');
    }
    $this->portNumber = $portNumber;
  }

  /**
   * @param String path
   * @param array params
   * @param HttpMethod method
   * @return void
   */
  public function makeRequest(String $path, $params, HttpMethod $method = null)
  {
    $method = ($method !== null)? $method : HttpMethod::GET();
    // Params are a map from names to values
    $paramString = '';
    foreach ($params as $name => $value) {
      $paramString .= $name . '=';
      $paramString .= urlencode($value) . '&';
    }
    $paramString = trim($paramString, '&');
    $hostName = $this->hostName;

    // Create the connection
  //try {
      $sock = fsockopen($hostName, $this->portNumber, $errno, $errstr, 1);
      if ($errno) { \FB::error($errno . ':' . $errstr); exit; }
  /*} catch (\ErrorException $e) {
      \FB::error($e->getMessage());*/

      // todo:Matt Renyard: place copy of error in server log?
      // todo:Matt Renyard: try alternative HOST and PORT etc.?

      // if DEV_MODE use fallback local response stubs
      if (strpos($_SERVER["HTTP_HOST"], 'dev.') === 0) {
        $hostName = 'dev.' . SVELTE_DOMAIN;
        $path = '/stubs' . $path;
        \FB::info('Trying 127.0.0.1 Port:80 Host:'.$hostName.' Path:'.$path);
        $sock = fsockopen('127.0.0.1', 80, $errno, $errstr, 1);
      } else { throw $e; }
  //}

    if ($method === HttpMethod::GET()) { $path .= "?" . $paramString; }

    fputs($sock, $method . ' ' . $path . " HTTP/1.1\r\n");
    fputs($sock, 'Host: ' . $hostName . "\r\n");

    // todo:mrenyard: add json and plain text support
    fputs($sock, "Accept: application/xml, text/xml");
    fputs($sock, "Accept-Charset: utf-8");

    if ($method === HttpMethod::POST()) {
      fputs($sock, "Content-type: " . "application/x-www-form-urlencoded\r\n");
      fputs($sock, "Content-length: " . strlen($paramString) . "\r\n");
    }
    fputs($sock, "Connection: close\r\n\r\n");
    if ($method === HttpMethod::POST()) { fputs($sock, $paramString); }

    // Buffer the result
    stream_set_blocking($sock, FALSE );
    stream_set_timeout($sock, 1);

    $info = stream_get_meta_data($sock);
    $result = '';
    while (!feof($sock) && !$info['timed_out']) {
      $result .= fgets($sock,1024);
      $info = stream_get_meta_data($sock);
    }
    fclose($sock);

    if ($info['timed_out']) {
      \FB::error('Stream timed out - ' .$info['timed_out']);
      // todo:Matt Renyard: place copy of error in server log?
      // todo:Matt Renyard: try alternatives etc.?
      throw new ErrorException('Stream timed out - ' .$info['timed_out']);
    } else {

      $response = explode("\r\n\r\n", $result);

      if (null !== ($this->responseBody = $response[1])) {
        // parse body message as xhtml html or xml
        $this->responseBody = substr(
          $this->responseBody,
          strpos($this->responseBody, '<'),
          strrpos($this->responseBody, '>') - strpos($this->responseBody, '<')+1
        );
      }
      $this->responseHeader = preg_split("/\\r\\n|\\r|\\n/", $response[0]);
    }
  }

  protected function get_responseStatus()
  {
    if (!isset($this->responseHeader)) { return null; }
    if (!isset($this->responseStatus)) {
      $this->responseStatus = $this->responseHeader[0];
    }
    return $this->responseStatus;
  }

  protected function get_responseCode()
  {
    $status = $this->get_responseStatus();
    if ($status === null) { return null; }
    if (!isset($this->responseCode)) {
      $this->responseCode = explode(' ', $status)[1];
    }
    return $this->responseCode;
  }

  /**
   */
  protected function get_responseHeader(String $name = null)
  {
    if(!$this->responseHeader) { throw new exception('todo:mrenyard: call makeRequest first'); }
    return $this->responseHeader;
  }

  /**
   * Response includes message body
   *
   * @return Boolean hasBody
   */
  protected function get_hasBody()
  {
    return Boolean::set(isset($this->responseBody));
  }

  /**
   */
  protected function get_responseBody()
  {
    if(!isset($this->responseBody)) { throw new exception('todo:mrenyard: please check hasBody() first'); }
    return $this->responseBody;
  }
}
