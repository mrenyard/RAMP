<?php
/**
 * Svelte - Rapid web application development using best practice.
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program; if
 * not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 *
 * @author Matt Renyard (renyard.m@gmail.com)
 * @package svelte
 * @version 0.0.9;
 */
namespace svelte\core\util;

use svelte\core\Object;
use svelte\core\String;
use svelte\core\Boolean;

/**
 */
final class XmlParser_EXTRA extends Object {

  private $compliant;
  private $expectedObjects;

  /**
   *
  public function __construct() //Boolean $xmlObjectMapCompliant = null)
  {
    //$this->compliant = ($xmlObjectMapCompliant === null)? true : $xmlObjectMapCompliant->get();
  }*/

  /**
   *
   * todo:mrenyard: Possibly expand with attribute registration array
   */
  public function addExpectedClassAsEntity(Object $class, String $as)
  {
    if ($this->compliant) {
      throw new Exception('No description requered when XML ObjectMap Compliant');
    }
    $this->expectedObjects[(string)$as] = get_class($class);
  }

  private function isObject($entityName)
  {
    foreach ($this->expectedObjects as $name => $value) {
      if($entityName === $name) { return true; }
    }
    return false;
  }

  /**
   *
   * @return Object (Record or Collection)
   */
  public function parseToObject(\SimpleXmlElement $xmlElement)
  {
    return $this->parseNode($xmlElement);
  }

  private function parseNode(\SimpleXmlElement $xmlElement, \stdClass $dataObject = null)
  {
    $record = null;
    $entityName = $xmlElement->getName();

    if ($this->isObject($entityName)) {

      $recordFullName = $this->expectedObjects[$entityName];

      if (strpos($recordFullName, 'Collection') > 0) { // I am a Collection

        $record = new $recordFullName();
        foreach ($xmlElement as $name => $value) { // each child node
          $record->add($this->parseNode($value, $dataObject));
        }
      } else { // I am an Object

        $dataObject = new \stdClass();
        $record = new $recordFullName($dataObject);
        foreach ($xmlElement as $name => $value) { // each child node

          if ($this->isObject($name)) { // child is Object (Collection or Record)
            $record->$name = $this->parseNode($value, $dataObject);
          } else { // child is Property
            $this->parseNode($value, $dataObject);
          }
        }
      }
    } else { // I am a Property

      $propertyName = (string)String::camelCase(String::set($entityName), Boolean::TRUE());
      // todo:mrenyard: Handle generic property mapping
      if ($propertyName === 'id') { $propertyName = 'centricityId'; }
      $dataObject->$propertyName = (string)$xmlElement;
    }
    if ($record) { return $record; }
  }

}
