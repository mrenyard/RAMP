<?php
/**
 * Testing - Svelte - Rapid web application development enviroment for building
 *  flexible, customisable web systems.
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program; if
 * not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 *
 * @author Matt Renyard (renyard.m@gmail.com)
 * @version 0.0.9;
 */
namespace tests\svelte\model\business;

require_once '/usr/share/php/svelte/SETTING.class.php';
require_once '/usr/share/php/tests/ChromePhp.class.php';
require_once '/usr/share/php/svelte/core/SvelteObject.class.php';
require_once '/usr/share/php/svelte/core/Str.class.php';
require_once '/usr/share/php/svelte/core/iCollection.class.php';
require_once '/usr/share/php/svelte/core/iOption.class.php';
require_once '/usr/share/php/svelte/model/business/BusinessModelManager.class.php';
require_once '/usr/share/php/svelte/model/business/SQLBusinessModelManager.class.php';
require_once '/usr/share/php/svelte/model/Model.class.php';
require_once '/usr/share/php/svelte/model/business/BusinessModel.class.php';
require_once '/usr/share/php/svelte/model/business/Record.class.php';
require_once '/usr/share/php/svelte/model/business/RecordCollection.class.php';
require_once '/usr/share/php/svelte/model/business/field/Field.class.php';
require_once '/usr/share/php/svelte/model/business/field/Input.class.php';
require_once '/usr/share/php/svelte/model/business/iBusinessModelDefinition.class.php';
require_once '/usr/share/php/svelte/model/business/SimpleBusinessModelDefinition.class.php';

require_once '/usr/share/php/tests/svelte/model/business/mocks/SQLBusinessModelManagerTest/MockRecord.class.php';

use svelte\SETTING;
use svelte\core\Str;
use svelte\condition\PostData;
use svelte\model\business\SimpleBusinessModelDefinition;

/**
 * Specialist testing of bad PDO connection in \svelte\model\business\SQLBusinessModelManager.
 * Run independatly as special case due to intentianal performace lag and the use of constants
 */
class BadPDOConnectionTest extends \PHPUnit\Framework\TestCase
{
  /**
   * Collection of PDO connection related assertions for \svelte\model\business\BusinessModelManager::getBusinessModel().
   * - assert unsuccessfull re-attemps 2 other times at gradualy prelonged intervals
   * - assert reports detail of attemps on fail
   * @link svelte.BusinessModelManager#method_getBusinessModel svelte\BusinessModelManager::getBusinessModel()
   */
  public function testBadConnection()
  {
    \ChromePhp::clear();
    SETTING::$SVELTE_BUSINESS_MODEL_NAMESPACE = 'tests\svelte\model\business\mocks\SQLBusinessModelManagerTest';
    SETTING::$SVELTE_BUSINESS_MODEL_MANAGER = 'svelte\model\business\SQLBusinessModelManager';
    SETTING::$DATABASE_CONNECTION = 'mysql:host=localhost;dbname=notDB';
    SETTING::$DATABASE_PASSWORD = 'notpassword';
    SETTING::$DATABASE_USER = 'notroot';
    SETTING::$DATABASE_MAX_RESULTS = 4;
    try {
      $MODEL_MANAGER = SETTING::$SVELTE_BUSINESS_MODEL_MANAGER;
      $testObject = $MODEL_MANAGER::getInstance();
      $testObject->getBusinessModel(new SimpleBusinessModelDefinition(Str::set('MockRecord'), Str::set('key1')));
    } catch (\PDOException $expected) {
      $i = 0;
      foreach (\ChromePhp::getMessages() as $message)
      {
        if ($i == 0)
        {
          $this->AssertSame(
            'LOG:SQL: SELECT * FROM MockRecord WHERE MockRecord.property = "key1";',
            $message
          );
          $i++;
          continue;
        }
        $this->AssertSame(
          'LOG:Database Connection FAILED - Retryed after ' . $i++ . 'second(s)',
          $message
        );
      }
      $this->assertEquals(4, $i);
      \ChromePhp::clear();
      return;
    }
    $this->fail('An expected \PDOException has NOT been raised.');
  }
}
